(def inc (fn (x) (+ x 1)))
(def dec (fn (x) (+ x -1)))

(def foldl
     (fn (fun acc coll)
         (if (empty? coll)
             acc
             (recur fun (fun acc (first coll)) (rest coll))
             )))

(def reverse
     (fn (coll)
         (foldl (fn (acc elem)
                    (cons elem acc))
                (list)
                coll)
         ))

(def map/foldl
     (fn (fun coll)
         (reverse
          (foldl (fn (acc elem)
                     (cons (fun elem) acc))
                 (list)
                 coll)
          )))

(def map
     (fn (fun coll)
         (if (empty? coll)
             coll
           (cons (fun (first coll)) (map fun (rest coll))))))

(def filter
     (fn (predicate coll)
         (reverse (foldl
                   (fn (acc elem)
                       (if (predicate elem)
                           (cons elem acc)
                           acc))
                   (list)
                   coll
                   ))
         ))

(def sumrange
     (fn (start end)
         ((fn (start end sum)
              (if (= start end)
                  sum
                  (recur (inc start) end (+ sum start))
                  ))
          start
          end
          0)
         ))
